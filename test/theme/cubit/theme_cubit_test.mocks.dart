// Mocks generated by Mockito 5.4.2 from annotations
// in todo/test/theme/cubit/theme_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter/material.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i2;
import 'package:todo/theme/preferences/theme_preferences.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSharedPreferences_0 extends _i1.SmartFake
    implements _i2.SharedPreferences {
  _FakeSharedPreferences_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ThemePreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemePreferences extends _i1.Mock implements _i3.ThemePreferences {
  @override
  _i2.SharedPreferences get preferences => (super.noSuchMethod(
        Invocation.getter(#preferences),
        returnValue: _FakeSharedPreferences_0(
          this,
          Invocation.getter(#preferences),
        ),
        returnValueForMissingStub: _FakeSharedPreferences_0(
          this,
          Invocation.getter(#preferences),
        ),
      ) as _i2.SharedPreferences);

  @override
  String get KEY => (super.noSuchMethod(
        Invocation.getter(#KEY),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);

  @override
  _i4.Stream<_i5.ThemeMode> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i5.ThemeMode>.empty(),
        returnValueForMissingStub: _i4.Stream<_i5.ThemeMode>.empty(),
      ) as _i4.Stream<_i5.ThemeMode>);

  @override
  _i5.ThemeMode getTheme() => (super.noSuchMethod(
        Invocation.method(
          #getTheme,
          [],
        ),
        returnValue: _i5.ThemeMode.system,
        returnValueForMissingStub: _i5.ThemeMode.system,
      ) as _i5.ThemeMode);

  @override
  void setTheme(_i5.ThemeMode? theme) => super.noSuchMethod(
        Invocation.method(
          #setTheme,
          [theme],
        ),
        returnValueForMissingStub: null,
      );
}
